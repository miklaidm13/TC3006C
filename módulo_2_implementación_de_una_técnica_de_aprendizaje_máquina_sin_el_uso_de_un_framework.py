# -*- coding: utf-8 -*-
"""Módulo 2 Implementación de una técnica de aprendizaje máquina sin el uso de un framework.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DTrpICpkGCuCpOsxkazj8TX2elNurCCM
"""

import numpy as np
from collections import Counter

def euclidean_distance(x1, x2):
    return np.sqrt(np.sum((x1 - x2)**2))

def knn_fit(X_train, y_train):
    return X_train, y_train

def knn_predict(X_train, y_train, X_test, k=3):
    predictions = []
    for i, x in enumerate(X_test):
        distances = [euclidean_distance(x, x_train) for x_train in X_train]
        k_indices = np.argsort(distances)[:k]
        k_nearest_labels = [y_train[i] for i in k_indices]
        most_common = Counter(k_nearest_labels).most_common(1)
        predictions.append(most_common[0][0])
        print(f"Instance {i+1} - Predicted: {most_common[0][0]}, Actual: {y_test[i]}")
    return predictions

from sklearn.datasets import load_iris
iris = load_iris()
X = iris.data
y = iris.target

print("Shape of X:", X.shape)
print("Shape of y:", y.shape)


np.random.seed(42)
indices = np.arange(len(X))
np.random.shuffle(indices)

split_ratio = 0.8
split_index = int(split_ratio * len(X))

X_train = X[indices[:split_index]]
X_test = X[indices[split_index:]]
y_train = y[indices[:split_index]]
y_test = y[indices[split_index:]]

X_train, y_train = knn_fit(X_train, y_train)


predictions = knn_predict(X_train, y_train, X_test, k=3)

accuracy = np.mean(predictions == y_test)
print("Accuracy:", accuracy)
print("Aquí veremos un ejemplo de valores fijos y su resultado:")
sample_data = np.array([[5.1, 3.5, 1.4, 0.2],
                        [6.7, 3.1, 5.6, 2.4]])

sample_predictions = knn_predict(X_train, y_train, sample_data, k=3)

for i, prediction in enumerate(sample_predictions):
    print(f"Sample {i+1} predicted class:", prediction)
# Take user input for new data points
num_samples = int(input("Ingrese cuantas predicciones hará: "))
new_samples = []
for _ in range(num_samples):
    sample = []
    for i in range(X.shape[1]):
        value = float(input(f"Entre el valor del parámetro {i+1}: "))
        sample.append(value)
    new_samples.append(sample)

new_samples = np.array(new_samples)


new_predictions = knn_predict(X_train, y_train, new_samples, k=3)


for i, prediction in enumerate(new_predictions):
    print(f"Sample {i+1} predicted class:", prediction)

